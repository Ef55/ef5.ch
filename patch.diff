diff --git a/Generate.scala b/Generate.scala
index 4f75a29..e1e717f 100755
--- a/Generate.scala
+++ b/Generate.scala
@@ -18,7 +18,7 @@ def walkFiles(root: os.Path) = {
   }
 }
 
-def markdownToHtml(content: String): (String, Map[String, List[String]]) = {
+def markdownToHtml(content: String, cwd: Option[os.Path]): (String, Context) = {
   import scala.jdk.CollectionConverters.*
   import org.commonmark.node.*
   import org.commonmark.parser.Parser
@@ -34,10 +34,24 @@ def markdownToHtml(content: String): (String, Map[String, List[String]]) = {
     .extensions(extensions)
     .build();
 
-  val parsed = parser.parse(content)
+  val parsed0 = parser.parse(content)
   val metadata = YamlFrontMatterVisitor()
-  parsed.accept(metadata)
-  (renderer.render(parsed), metadata.getData.asScala.view.mapValues(_.asScala.toList).toMap)
+  parsed0.accept(metadata)
+
+  import scala.language.implicitConversions
+  val ctx = Context(
+    "page" -> Context(
+      metadata.getData.asScala.view.mapValues((v: java.util.List[String]) => Value(v.asScala.mkString("|"))).toSeq : _*
+    )
+  )
+
+  val jinjava = new Jinjava();
+  if (cwd.isDefined) {
+    jinjava.setResourceLocator(TrackingResourceLocator(cwd.get))
+  }
+  val md = jinjava.render(content, ctx.toJavaMap)
+  val parsed = parser.parse(md)
+  (renderer.render(parsed), ctx)
 }
 
 def injectIn(content: String, template: String) = {
@@ -62,6 +76,20 @@ sealed trait Context {
       case Value(v) => java.util.Map.of()
     }
   }
+
+  def meld (that: Context): Context = {
+    (this, that) match {
+      case (Struct(m1), Struct(m2)) =>
+        val inter = (m1.keySet & m2.keySet)
+        if (inter.isEmpty) {
+          Struct(m1 ++ m2)
+        }
+        else {
+          ???
+        }
+      case _ => ???
+    }
+  }
 }
 case class Struct(m: Map[String, Context]) extends Context 
 case class Value(v: String) extends Context
@@ -74,15 +102,33 @@ object Context {
   }
 }
 
+class TrackingResourceLocator(path: os.Path) extends loader.ResourceLocator {
+  private val root_ = path
+  private val loaded_ = scala.collection.mutable.Set.empty[os.Path]
+
+  import java.nio.charset.Charset 
+  override def getString(name: String, encoding: Charset, interpreter: interpret.JinjavaInterpreter): String = {
+    val path = root_ / os.SubPath(name)
+
+    if (!os.isFile(path)) {
+      throw new loader.ResourceNotFoundException(s"Couldn't find resource: ${name} (${path})")
+    }
+
+    loaded_.add(path)
+    return os.read(path, charSet = encoding)
+  }
+
+  def loaded: Set[os.Path] = loaded_.toSet
+}
+
 class Deployer {
   private val jinjava = new Jinjava();
-  jinjava.setResourceLocator(loader.FileLocator(File("template")))
+  jinjava.setResourceLocator(TrackingResourceLocator(os.pwd / "template"))
 
-  def apply(input: String, ctx: Map[String, List[String]] => Struct): String = {
-
-    val (content, metadata) = markdownToHtml(input)
+  def apply(input: String, ctx: Struct, source: os.Path): String = {
+    val (content, metadata) = markdownToHtml(input, Some(source))
     val template = injectIn(content, "page.html")
-    jinjava.render(template, ctx(metadata).toJavaMap)
+    jinjava.render(template, ctx.meld(metadata).toJavaMap)
   }
 }
 
@@ -127,7 +173,7 @@ def main(args: String*) = {
 
     import scala.language.implicitConversions
     val cal = java.util.Calendar.getInstance()
-    val ctx: Map[String, List[String]] => Struct = metadata => Context(
+    val ctx = Context(
       "date" -> s"${cal.get(java.util.Calendar.DATE)}.${cal.get(java.util.Calendar.MONTH) + 1}.${cal.get(java.util.Calendar.YEAR)}",
       "socials" -> Context(
         "Github" -> "https://github.com/Ef55"
@@ -141,13 +187,10 @@ def main(args: String*) = {
             "About me" -> s"/",
           )
         ),
-      ),
-      "page" -> Context(
-        "title" -> metadata.getOrElse("title", List.empty).mkString("|"),
       )
     )
 
-    val output = deployer(input, ctx)
+    val output = deployer(input, ctx, path)
     os.write(outDir / relative / "index.html", output, createFolders = true)
   }
 
